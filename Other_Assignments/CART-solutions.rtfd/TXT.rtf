{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Medium;\f1\fnil\fcharset0 HelveticaNeue;\f2\fmodern\fcharset0 Courier;
\f3\fnil\fcharset0 HelveticaNeue-Bold;\f4\fmodern\fcharset0 Courier-Bold;\f5\fmodern\fcharset0 Courier-Oblique;
\f6\fnil\fcharset0 HelveticaNeue-Italic;\f7\fnil\fcharset0 STIXGeneral-Regular;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;\red0\green0\blue0;
\red133\green0\blue2;\red242\green242\blue242;\red210\green0\blue53;\red133\green0\blue96;\red17\green137\blue135;
\red135\green136\blue117;}
{\*\expandedcolortbl;;\cssrgb\c20000\c20000\c20000;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0\c3922;
\cssrgb\c60000\c0\c0;\cssrgb\c96078\c96078\c96078;\cssrgb\c86667\c6667\c26667;\cssrgb\c60000\c0\c45098;\cssrgb\c0\c60000\c60000;
\cssrgb\c60000\c60000\c53333;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat2\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid201\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat3\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid301\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat4\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid401\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat5\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid701\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat6\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid801\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat7\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid901\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat8\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1001\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1101\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat2\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1201\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat3\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1301\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid14}
{\list\listtemplateid15\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat4\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1401\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid15}
{\list\listtemplateid16\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat5\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1501\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid16}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}{\listoverride\listid15\listoverridecount0\ls15}{\listoverride\listid16\listoverridecount0\ls16}}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sa200\partightenfactor0

\f0\fs76 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 CART Activity\cb1 \
\pard\pardeftab720\sa200\partightenfactor0

\fs36 \cf2 \cb3 Solutions\cb1 \
\pard\pardeftab720\sa200\partightenfactor0

\f1\fs28 \cf2 \cb3 There are (at least) three packages for building classification and regression trees (CART models) in R. The one we\'92ll use is\'a0
\f2\fs25\fsmilli12600 \cb4 rpart
\f1\fs28 \cb3 . Install this package now, and load it using the chunk below.\
\pard\pardeftab720\sa200\partightenfactor0

\f3\b \cf2 Data set:
\f1\b0 \'a0The file CEREAL.CSV contains some nutritional information and grocery shelf location for 77 breakfast cereals. The data include cereal name, cereal manufacturer (
\f2\fs25\fsmilli12600 \cb4 mfr2
\f1\fs28 \cb3 ) (G=General Mills, K=Kellogg\'92s, O=other),\'a0
\f2\fs25\fsmilli12600 \cb4 type
\f1\fs28 \cb3 \'a0(H=hot, C=cold), several nutritional variables, the\'a0
\f2\fs25\fsmilli12600 \cb4 shelf
\f1\fs28 \cb3 \'a0location in a grocery store (1,2 or 3 for bottom, middle or top), and a Consumer Reports\'a0
\f2\fs25\fsmilli12600 \cb4 rating
\f1\fs28 \cb3 \'a0of the cereal. For the rating variable, the higher the number, the healthier the cereal is to eat. We would like to model the Consumer Reports rating of the cereal. The data set is posted on Moodle; upload it in the chunk below.\
\pard\pardeftab720\partightenfactor0

\f4\b\fs26 \cf5 \cb6 \strokec5 library
\f2\b0 \cf2 \strokec2 (rpart)\
CEREAL <- read.csv(\cf7 \strokec7 "~/Documents/DATA-231 F2021/Data/CEREAL.CSV"\cf2 \strokec2 )\
\pard\pardeftab720\sa200\partightenfactor0

\f0\fs60 \cf2 \cb3 A. One Numerical Predictor\cb1 \
\pard\pardeftab720\sa200\partightenfactor0

\f1\fs28 \cf2 \cb3 First, we will use\'a0
\f2\fs25\fsmilli12600 \cb4 sugars
\f1\fs28 \cb3 \'a0as our sole predictor variable.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Make a scatterplot of rating as a function of sugar content. Explain why a linear regression model would not be a good idea here.\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf2 \cb6 plot(rating~sugars,data=CEREAL)\
\pard\pardeftab720\sa200\partightenfactor0

\f1\fs28 \cf2 \cb1 {{\NeXTGraphic unknown.png \width26880 \height19200 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\pard\pardeftab720\sa200\partightenfactor0
\cf2 \cb3 The relationship between these two variables do not appear to be linear, so any sort of line is a bad idea. In fact, there seems to be three separate groups: one with very low sugar content, one with sugar content between 1 and 7, and one with sugar > 7.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sa200\partightenfactor0

\f0\fs36 \cf2 \cb3 The function to fit a regression tree is\'a0
\f2\fs32\fsmilli16200 \cb4 rpart()
\f0\fs36 \cb3 . It works similarly to\'a0
\f2\fs32\fsmilli16200 \cb4 lm()
\f0\fs36 \cb3 \'a0or\'a0
\f2\fs32\fsmilli16200 \cb4 glm()
\f0\fs36 \cb3 , but has a couple of additional arguments:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0
\f2\fs25\fsmilli12600 \cf2 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 method = "anova"
\f1\fs28 \cb3 \'a0specifies that this is a regression tree (
\f2\fs25\fsmilli12600 \cb4 method="class"
\f1\fs28 \cb3 \'a0would specify a classification tree)\cb1 \
\ls2\ilvl0
\f2\fs25\fsmilli12600 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 minsplit =
\f1\fs28 \cb3 \'a0specifies the minimum number of values in a node for it to be considered for splitting. The default is 20, which means that if a node has < 20 values, it can not be split. If you want to override this, and consider splitting smaller nodes, you can specify another value.\cb1 \
\ls2\ilvl0
\f2\fs25\fsmilli12600 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 minbucket =
\f1\fs28 \cb3 \'a0specifies the minimum size of a terminal node. The default is minsplit/3. (For example\'a0
\f2\fs25\fsmilli12600 \cb4 minsplit=9
\f1\fs28 \cb3 \'a0will allow for the splitting of nodes as small as 9, which means you could have terminal nodes as small as 3.)\cb1 \
\ls2\ilvl0
\f2\fs25\fsmilli12600 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 cp =
\f1\fs28 \cb3 \'a0specifies the complexity parameter; smaller values mean you\'92re willing to have more complexity in the tree. The default is 0.01.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0
\f3\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Fit a regression tree
\f1\b0 \'a0with rating as the response and sugars as the predictor. (For now, stick with the default minsplit and minbucket values.) Call this tree\'a0
\f2\fs25\fsmilli12600 \cb4 sugar1
\f1\fs28 \cb3 .\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf2 \cb6 sugar1 <- rpart(rating~sugars,data=CEREAL,method=\cf7 \strokec7 "anova"\cf2 \strokec2 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0
\f3\b\fs28 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Plot the tree diagram
\f1\b0 \'a0using the code below.\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf2 \cb6 plot(sugar1,uniform=\cf8 \strokec8 T\cf2 \strokec2 ,branch=\cf9 \strokec9 0.6\cf2 \strokec2 ,margin=\cf9 \strokec9 0.2\cf2 \strokec2 ) 
\f5\i \cf10 \strokec10 #branch specifies the angle of the branches in the plot
\f2\i0 \cf2 \strokec2 \
text(sugar1,use.n=\cf8 \strokec8 T\cf2 \strokec2 ,cex=\cf9 \strokec9 0.8\cf2 \strokec2 ) 
\f5\i \cf10 \strokec10 #cex reduces the size of the text so it's more readable
\f2\i0 \cf2 \strokec2 \
\pard\pardeftab720\sa200\partightenfactor0

\f1\fs28 \cf2 \cb1 {{\NeXTGraphic 1__#$!@%!#__unknown.png \width26880 \height19200 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Compare this tree to the scatterplot in #1. Do the splits seem reasonable to you?\cb1 \
\pard\pardeftab720\sa200\partightenfactor0
\cf2 \cb3 Yes, they match up with the groups I eyeballed in #1.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sa200\partightenfactor0

\f0\fs36 \cf2 \cb3 Other details about this tree\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa200\partightenfactor0
\ls6\ilvl0
\f1\fs28 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Type\'a0
\f2\fs25\fsmilli12600 \cb4 sugar1
\f1\fs28 \cb3 \'a0to get additional information about this tree. Notice that this tells you the following information about\'a0
\f6\i each node
\f1\i0 : node number, where the split is, how many values are in the node, the SSE (\'93deviance\'94), the mean y value, and whether the node is terminal. This is essentially the same information that is plotted in the tree diagram.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa200\partightenfactor0
\ls6\ilvl0
\f2\fs25\fsmilli12600 \cf2 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 printcp(sugar1)
\f1\fs28 \cb3 \'a0or\'a0
\f2\fs25\fsmilli12600 \cb4 sugar1$cptable
\f1\fs28 \cb3 \'a0gives you tree statistics about this tree and each tree of smaller size.\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf2 \cb6 sugar1\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 ## n=76 (1 observation deleted due to missingness)\
## \
## node), split, n, deviance, yval\
##       * denotes terminal node\
## \
## 1) root 76 14929.2900 42.55830  \
##   2) sugars>=7.5 35  1238.2440 31.51804 *\
##   3) sugars< 7.5 41  5783.2350 51.98291  \
##     6) sugars>=0.5 34  1957.9180 48.05260 *\
##     7) sugars< 0.5 7   749.0823 71.07302 *\
\pard\pardeftab720\partightenfactor0
\cf2 \cb6 printcp(sugar1)\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 ## \
## Regression tree:\
## rpart(formula = rating ~ sugars, data = CEREAL, method = "anova")\
## \
## Variables actually used in tree construction:\
## [1] sugars\
## \
## Root node error: 14929/76 = 196.44\
## \
## n=76 (1 observation deleted due to missingness)\
## \
##        CP nsplit rel error  xerror     xstd\
## 1 0.52968      0   1.00000 1.01903 0.210489\
## 2 0.20605      1   0.47032 0.54160 0.132991\
## 3 0.01000      2   0.26426 0.37818 0.090871\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls7\ilvl0
\f1\fs28 \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The code below will plot two graphs: one of the actual and cross-validated\'a0
\f7\i\fs33\fsmilli16800 \up0 R
\f1\i0 \cb1 \uc0\u8232 
\f7\fs23\fsmilli11878 \cb3 2
\f1\fs33\fsmilli16800 \cb1 \uc0\u8232 \u8232 
\f7\fs28 \cb3 R\cb1 \up0 \uc0\u8232 
\fs21 \cb3 \up0 2\cb1 \up0 \uc0\u8232 
\fs28 \uc0\u8232 
\f1 \cb3 , and one of the cross-validated error.\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf2 \cb6 par(mfrow=c(\cf9 \strokec9 1\cf2 \strokec2 ,\cf9 \strokec9 2\cf2 \strokec2 )) 
\f5\i \cf10 \strokec10 #tells RMarkdown to print two graphs side-by-side
\f2\i0 \cf2 \strokec2 \
rsq.rpart(sugar1) 
\f5\i \cf10 \strokec10 #plots the 2 graphs, and outputs the same information as printcp(sugar1)
\f2\i0 \cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 ## \
## Regression tree:\
## rpart(formula = rating ~ sugars, data = CEREAL, method = "anova")\
## \
## Variables actually used in tree construction:\
## [1] sugars\
## \
## Root node error: 14929/76 = 196.44\
## \
## n=76 (1 observation deleted due to missingness)\
## \
##        CP nsplit rel error  xerror     xstd\
## 1 0.52968      0   1.00000 1.01903 0.210489\
## 2 0.20605      1   0.47032 0.54160 0.132991\
## 3 0.01000      2   0.26426 0.37818 0.090871\
\pard\pardeftab720\sa200\partightenfactor0

\f1\fs28 \cf2 \cb1 {{\NeXTGraphic 2__#$!@%!#__unknown.png \width26880 \height19200 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Even if you think the 3 nodes are a good choice, force the regression tree to have more complexity by setting cp=0.00001. Call this tree\'a0
\f2\fs25\fsmilli12600 \cb4 sugar2
\f1\fs28 \cb3 .\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf2 \cb6 sugar2 <- rpart(rating~sugars,data=CEREAL,method=\cf7 \strokec7 "anova"\cf2 \strokec2 ,cp=\cf9 \strokec9 0.0001\cf2 \strokec2 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls9\ilvl0
\f1\fs28 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	6	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 How many terminal nodes does\'a0
\f2\fs25\fsmilli12600 \cb4 sugar2
\f1\fs28 \cb3 \'a0have? How small is its smallest node? Draw the tree diagram below.\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf2 \cb6 plot(sugar2,uniform=\cf8 \strokec8 T\cf2 \strokec2 ,branch=\cf9 \strokec9 0.6\cf2 \strokec2 ,margin=\cf9 \strokec9 0.2\cf2 \strokec2 ) 
\f5\i \cf10 \strokec10 #branch specifies the angle of the branches in the plot
\f2\i0 \cf2 \strokec2 \
text(sugar2,use.n=\cf8 \strokec8 T\cf2 \strokec2 ,cex=\cf9 \strokec9 0.8\cf2 \strokec2 ) 
\f5\i \cf10 \strokec10 #cex reduces the size of the text so it's more readable
\f2\i0 \cf2 \strokec2 \
\pard\pardeftab720\sa200\partightenfactor0

\f1\fs28 \cf2 \cb1 {{\NeXTGraphic 3__#$!@%!#__unknown.png \width26880 \height19200 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\pard\pardeftab720\sa200\partightenfactor0
\cf2 \cb3 sugar2 has 5 terminal nodes and the smallest one has n=7 values.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls10\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	7	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Consider all three of the methods for choosing the \'93best\'94 tree that we discussed last week. Based on each one of these methods, how many splits would you choose for this data?\cb1 \
\pard\pardeftab720\partightenfactor0

\f5\i\fs26 \cf10 \cb6 \strokec10 #Method a: choose tree with smallest xerror
\f2\i0 \cf2 \strokec2 \
sugar2$cptable \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 ##            CP nsplit rel error    xerror       xstd\
## 1 0.529684471      0 1.0000000 1.0282800 0.20666034\
## 2 0.206053559      1 0.4703155 0.5509224 0.13627010\
## 3 0.004510074      2 0.2642620 0.3450485 0.07609035\
## 4 0.002639815      3 0.2597519 0.3714829 0.07237427\
## 5 0.000100000      4 0.2571121 0.3591507 0.07230806\
\pard\pardeftab720\partightenfactor0

\f5\i \cf10 \cb6 \strokec10 #Method b: penalize larger trees 
\f2\i0 \cf2 \strokec2 \

\f5\i \cf10 \strokec10 #Choose the tree with the minimum value of this metric: n*(rel error)+2*(#terminal nodes)
\f2\i0 \cf2 \strokec2 \
length(sugar2$y)*sugar2$cptable[,\cf9 \strokec9 3\cf2 \strokec2 ]+\cf9 \strokec9 2\cf2 \strokec2 *(sugar2$cptable[,\cf9 \strokec9 2\cf2 \strokec2 ]+\cf9 \strokec9 1\cf2 \strokec2 )\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 ##        1        2        3        4        5 \
## 78.00000 39.74398 26.08391 27.74114 29.54052\
\pard\pardeftab720\partightenfactor0

\f5\i \cf10 \cb6 \strokec10 #Method c: balance Rsq or cross-validated Rsq against size/complexity of tree
\f2\i0 \cf2 \strokec2 \
par(mfrow=c(\cf9 \strokec9 1\cf2 \strokec2 ,\cf9 \strokec9 2\cf2 \strokec2 ))\
rsq.rpart(sugar2) 
\f5\i \cf10 \strokec10 #plots of Rsquared and cross-validated error
\f2\i0 \cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 ## \
## Regression tree:\
## rpart(formula = rating ~ sugars, data = CEREAL, method = "anova", \
##     cp = 1e-04)\
## \
## Variables actually used in tree construction:\
## [1] sugars\
## \
## Root node error: 14929/76 = 196.44\
## \
## n=76 (1 observation deleted due to missingness)\
## \
##          CP nsplit rel error  xerror     xstd\
## 1 0.5296845      0   1.00000 1.02828 0.206660\
## 2 0.2060536      1   0.47032 0.55092 0.136270\
## 3 0.0045101      2   0.26426 0.34505 0.076090\
## 4 0.0026398      3   0.25975 0.37148 0.072374\
## 5 0.0001000      4   0.25711 0.35915 0.072308\
\pard\pardeftab720\sa200\partightenfactor0

\f1\fs28 \cf2 \cb1 {{\NeXTGraphic 4__#$!@%!#__unknown.png \width26880 \height19200 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\pard\pardeftab720\sa200\partightenfactor0
\cf2 \cb3 Using Method a: 2 splits\cb1 \uc0\u8232 \cb3 Using Method b: 2 splits\cb1 \uc0\u8232 \cb3 Using Method c: 2 splits\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls11\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	8	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 You can automatically\'a0
\f3\b prune
\f1\b0 \'a0the tree back to that number of splits with the function\'a0
\f2\fs25\fsmilli12600 \cb4 prune()
\f1\fs28 \cb3 :\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf2 \cb6 pruned.sugar <- prune(sugar2,cp=\cf9 \strokec9 0.0045101\cf2 \strokec2 ) 
\f5\i \cf10 \strokec10 #set cp equal to the cp value of the tree you're choosing
\f2\i0 \cf2 \strokec2 \
\pard\pardeftab720\sa200\partightenfactor0

\f1\fs28 \cf2 \cb3 (This code is especially useful when you have a\'a0
\f6\i large
\f1\i0 \'a0number of splits that you\'92re trying to prune back.)\cb1 \
\cb3 Notice that\'a0
\f2\fs25\fsmilli12600 \cb4 pruned.sugar
\f1\fs28 \cb3 \'a0is just a tree object like any other, so you can perform the same tasks and apply the same code to it as we did to\'a0
\f2\fs25\fsmilli12600 \cb4 sugar1
\f1\fs28 \cb3 \'a0and\'a0
\f2\fs25\fsmilli12600 \cb4 sugar1
\f1\fs28 \cb3 \'a0in parts 1 - 7.\cb1 \
\pard\pardeftab720\sa200\partightenfactor0

\f0\fs60 \cf2 \cb3 B. Many Predictor Variables\cb1 \
\pard\pardeftab720\sa200\partightenfactor0

\f1\fs28 \cf2 \cb3 Now, we will (potentially) use a large number of variables to predict rating. We have no pre-existing notions about which variables will be useful and which won\'92t be useful, so we want to include all the variables in the partitioning algorithm, except\'a0
\f2\fs25\fsmilli12600 \cb4 name
\f1\fs28 \cb3 \'a0and\'a0
\f2\fs25\fsmilli12600 \cb4 mfr
\f1\fs28 \cb3 \'a0(we\'92ll use\'a0
\f2\fs25\fsmilli12600 \cb4 mfr2
\f1\fs28 \cb3 \'a0instead). Remember: rpart will decide whether a variable is useful, and ignore the variables that aren\'92t!\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls12\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Fit a full model using all the variables as possible predictors, by using a dot after the tilde in the formula argument. (We\'92ll delete the first 2 columns in the data statement.)\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf2 \cb6 all1 <- rpart(rating~.,data=CEREAL[,\cf9 \strokec9 3\cf2 \strokec2 :\cf9 \strokec9 17\cf2 \strokec2 ],method=\cf7 \strokec7 "anova"\cf2 \strokec2 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0
\f1\fs28 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Make a tree diagram of this model. How many terminal nodes does it have?\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf2 \cb6 plot(all1,uniform=\cf8 \strokec8 T\cf2 \strokec2 ,branch=\cf9 \strokec9 0.6\cf2 \strokec2 ,margin=\cf9 \strokec9 0.2\cf2 \strokec2 ) 
\f5\i \cf10 \strokec10 #branch specifies the angle of the branches in the plot
\f2\i0 \cf2 \strokec2 \
text(all1,use.n=\cf8 \strokec8 T\cf2 \strokec2 ,cex=\cf9 \strokec9 0.8\cf2 \strokec2 ) 
\f5\i \cf10 \strokec10 #cex reduces the size of the text so it's more readable
\f2\i0 \cf2 \strokec2 \
\pard\pardeftab720\sa200\partightenfactor0

\f1\fs28 \cf2 \cb1 {{\NeXTGraphic 5__#$!@%!#__unknown.png \width26880 \height19200 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\pard\pardeftab720\sa200\partightenfactor0
\cf2 \cb3 6 terminal nodes\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls14\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Consider all three of the methods for choosing the \'93best\'94 tree that we discussed last week. Based on each one of these methods, how many splits would you choose?\cb1 \
\pard\pardeftab720\partightenfactor0

\f5\i\fs26 \cf10 \cb6 \strokec10 #Method a: choose tree with smallest xerror
\f2\i0 \cf2 \strokec2 \
all1$cptable \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 ##           CP nsplit rel error    xerror       xstd\
## 1 0.53171477      0 1.0000000 1.0320824 0.20891984\
## 2 0.18130009      1 0.4682852 0.6389867 0.13949943\
## 3 0.05585013      2 0.2869851 0.3890451 0.08664264\
## 4 0.03883971      3 0.2311350 0.4015172 0.08244989\
## 5 0.02152225      4 0.1922953 0.3645753 0.08085480\
## 6 0.01000000      5 0.1707731 0.3409497 0.07969866\
\pard\pardeftab720\partightenfactor0

\f5\i \cf10 \cb6 \strokec10 #Method b: penalize larger trees 
\f2\i0 \cf2 \strokec2 \

\f5\i \cf10 \strokec10 #Choose the tree with the minimum value of this metric: n*(rel error)+2*(#terminal nodes)
\f2\i0 \cf2 \strokec2 \
length(all1$y)*all1$cptable[,\cf9 \strokec9 3\cf2 \strokec2 ]+\cf9 \strokec9 2\cf2 \strokec2 *(all1$cptable[,\cf9 \strokec9 2\cf2 \strokec2 ]+\cf9 \strokec9 1\cf2 \strokec2 )\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 ##        1        2        3        4        5        6 \
## 79.00000 40.05796 28.09786 25.79740 24.80674 25.14953\
\pard\pardeftab720\partightenfactor0

\f5\i \cf10 \cb6 \strokec10 #Method c: balance Rsq or cross-validated Rsq against size/complexity of tree
\f2\i0 \cf2 \strokec2 \
par(mfrow=c(\cf9 \strokec9 1\cf2 \strokec2 ,\cf9 \strokec9 2\cf2 \strokec2 ))\
rsq.rpart(all1) 
\f5\i \cf10 \strokec10 #plots of Rsquared and cross-validated error
\f2\i0 \cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 ## \
## Regression tree:\
## rpart(formula = rating ~ ., data = CEREAL[, 3:17], method = "anova")\
## \
## Variables actually used in tree construction:\
## [1] calories protein  sugars  \
## \
## Root node error: 14997/77 = 194.76\
## \
## n= 77 \
## \
##         CP nsplit rel error  xerror     xstd\
## 1 0.531715      0   1.00000 1.03208 0.208920\
## 2 0.181300      1   0.46829 0.63899 0.139499\
## 3 0.055850      2   0.28699 0.38905 0.086643\
## 4 0.038840      3   0.23114 0.40152 0.082450\
## 5 0.021522      4   0.19230 0.36458 0.080855\
## 6 0.010000      5   0.17077 0.34095 0.079699\
\pard\pardeftab720\sa200\partightenfactor0

\f1\fs28 \cf2 \cb1 {{\NeXTGraphic 6__#$!@%!#__unknown.png \width26880 \height19200 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\pard\pardeftab720\sa200\partightenfactor0
\cf2 \cb3 Using Method a: 5 splits\cb1 \uc0\u8232 \cb3 Using Method b: 4 splits\cb1 \uc0\u8232 \cb3 Using Method c: 2 splits\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls15\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Prune the tree back to however many splits you chose in #3 and show the tree diagram below.\cb1 \
\pard\pardeftab720\sa200\partightenfactor0
\cf2 \cb3 There\'92s a big drop in error with 2 splits, whereas the benefits gained from additional splits aren\'92t substantial. So I would pick 2 splits.\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf2 \cb6 pruned.all <- prune(all1,cp=\cf9 \strokec9 0.05585013\cf2 \strokec2 ) 
\f5\i \cf10 \strokec10 #set cp equal to the cp value of the tree you're choosing
\f2\i0 \cf2 \strokec2 \
plot(pruned.all,uniform=\cf8 \strokec8 T\cf2 \strokec2 ,branch=\cf9 \strokec9 0.6\cf2 \strokec2 ,margin=\cf9 \strokec9 0.2\cf2 \strokec2 ); text(pruned.all,use.n=\cf8 \strokec8 T\cf2 \strokec2 ,cex=\cf9 \strokec9 0.8\cf2 \strokec2 ) \
\pard\pardeftab720\sa200\partightenfactor0

\f1\fs28 \cf2 \cb1 {{\NeXTGraphic 7__#$!@%!#__unknown.png \width26880 \height19200 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\pard\pardeftab720\sa200\partightenfactor0
\cf2 \cb3 Notice that this is the exact same tree as in sugar1!\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls16\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Your answer to #3\'a0
\f6\i may
\f1\i0 \'a0depend on how many leaves you have in your \'93original\'94 tree, since the values of\'a0
\f2\fs25\fsmilli12600 \cb4 xerror
\f1\fs28 \cb3 \'a0are not constant as more leaves are added. The tree below allows splits on nodes of size 10 (overriding the default of size 20). Thus, there are more leaves in this tree.\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf2 \cb6 all2 <- rpart(rating~.,data=CEREAL[,\cf9 \strokec9 3\cf2 \strokec2 :\cf9 \strokec9 17\cf2 \strokec2 ],method=\cf7 \strokec7 "anova"\cf2 \strokec2 ,minsplit=\cf9 \strokec9 10\cf2 \strokec2 )\
\pard\pardeftab720\sa200\partightenfactor0

\f1\fs28 \cf2 \cb3 Look at the tree statistics in\'a0
\f2\fs25\fsmilli12600 \cb4 printcp(all2)
\f1\fs28 \cb3 \'a0and\'a0
\f2\fs25\fsmilli12600 \cb4 rsq.rpart(all2)
\f1\fs28 \cb3 \'a0and notice that if you had fit this tree first (before all1), you\'a0
\f6\i may
\f1\i0 \'a0have made a different decision about the \'93best\'94 tree size (depending on your choosing criterion). The split points in that \'93best\'94 tree may also be different! \'85 Remember, we have no guarantee we\'92re getting the \'93best\'94 tree or the \'93right\'94 leaves!\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf2 \cb6 plot(all2,uniform=\cf8 \strokec8 T\cf2 \strokec2 ,branch=\cf9 \strokec9 0.6\cf2 \strokec2 ,margin=\cf9 \strokec9 0.2\cf2 \strokec2 ); text(all2,use.n=\cf8 \strokec8 T\cf2 \strokec2 ,cex=\cf9 \strokec9 0.8\cf2 \strokec2 ) \
\pard\pardeftab720\sa200\partightenfactor0

\f1\fs28 \cf2 \cb1 {{\NeXTGraphic 8__#$!@%!#__unknown.png \width26880 \height19200 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf2 \cb6 par(mfrow=c(\cf9 \strokec9 1\cf2 \strokec2 ,\cf9 \strokec9 2\cf2 \strokec2 ))\
rsq.rpart(all2)\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 ## \
## Regression tree:\
## rpart(formula = rating ~ ., data = CEREAL[, 3:17], method = "anova", \
##     minsplit = 10)\
## \
## Variables actually used in tree construction:\
## [1] calories fat      protein  sugars  \
## \
## Root node error: 14997/77 = 194.76\
## \
## n= 77 \
## \
##         CP nsplit rel error  xerror     xstd\
## 1 0.531715      0   1.00000 1.02056 0.204630\
## 2 0.181300      1   0.46829 0.63464 0.128784\
## 3 0.055850      2   0.28699 0.35071 0.077073\
## 4 0.038840      3   0.23114 0.32645 0.077596\
## 5 0.021522      4   0.19230 0.30484 0.075797\
## 6 0.012874      5   0.17077 0.27514 0.057435\
## 7 0.011603      6   0.15790 0.28098 0.059382\
## 8 0.010000      7   0.14630 0.27953 0.059373\
\pard\pardeftab720\sa200\partightenfactor0

\f1\fs28 \cf2 \cb1 {{\NeXTGraphic 9__#$!@%!#__unknown.png \width26880 \height19200 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\pard\pardeftab720\sa200\partightenfactor0
\cf2 \cb3 Feel free to play around with changing minsplit and/or the cp value, to see what kind of trees you get.\cb1 \
}